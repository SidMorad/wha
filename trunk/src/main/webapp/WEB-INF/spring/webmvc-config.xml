<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!--
		The controllers are autodetected POJOs labeled with the @Controller
		annotation.
	-->
	<context:component-scan base-package="nl.hajari.wha"
		use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller"
			type="annotation" />
	</context:component-scan>

	<!--
		Turns on support for mapping requests to Spring MVC @Controller
		methods Also registers default Formatters and Validators for use
		across all @Controllers
	-->
	<mvc:annotation-driven />

	<!--
		register "global" interceptor beans to apply to all registered
		HandlerMappings
	-->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor" />
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
			p:paramName="lang" />
	</mvc:interceptors>

	<!--
		selects a static view for rendering without the need for an explicit
		controller
	-->
	<mvc:view-controller path="/login" />
	<mvc:view-controller path="/index" />
	<mvc:view-controller path="/uncaughtException" />
	<mvc:view-controller path="/resourceNotFound" />
	<mvc:view-controller path="/dataAccessFailure" />
	<mvc:view-controller path="/accessDenied" />

	<!--
		Resolves logical view names returned by Controllers to Tiles; a view
		name to resolve is treated as the name of a tiles definition
	-->
	<bean class="org.springframework.js.ajax.AjaxUrlBasedViewResolver"
		id="tilesViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</bean>

	<!-- Configures the Tiles layout system -->
	<bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
		id="tilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layouts.xml</value>
				<!-- Scan views directory for Tiles configurations -->
				<value>/WEB-INF/views/**/views.xml</value>
			</list>
		</property>
	</bean>

	<!--
		Resolves localized messages*.properties and application.properties
		files in the application to allow for internationalization. The
		messages*.properties files translate Roo generated messages which are
		part of the admin interface, the application.properties resource
		bundle localizes all application specific messages such as entity
		names and menu items.
	-->
	<bean
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application"
		p:fallbackToSystemLocale="false" />

	<!-- store preferred language configuration in a cookie -->
	<bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
		id="localeResolver" p:cookieName="locale" />

	<!--
		resolves localized <theme_name>.properties files in the classpath to
		allow for theme support
	-->
	<bean
		class="org.springframework.ui.context.support.ResourceBundleThemeSource"
		id="themeSource" />

	<!-- store preferred theme configuration in a cookie -->
	<bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
		id="themeResolver" p:cookieName="theme3" p:defaultThemeName="hmsolutions" />

	<!--
		This bean resolves specific types of exceptions to corresponding
		logical - view names for error views. The default behaviour of
		DispatcherServlet - is to propagate all exceptions to the servlet
		container: this will happen - here with all other types of exceptions.
	-->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".lang.Exception">uncaughtException</prop>
				<prop key=".AccessDeniedException">accessDenied</prop>
			</props>
		</property>
	</bean>

	<!-- allows for integration of file upload functionality -->
	<bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver" />

	<!-- JSON configuration -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/vnd.com.mobilivity+json" />
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
					<property name="contentType" value="application/vnd.com.mobilivity+json" />
					<property name="objectMapper" ref="jacksonJsonObjectMapper" />
					<property name="renderedAttributes">
						<set>
							<value>items</value>
						</set>
					</property>

				</bean>
			</list>
		</property>
	</bean>

	<bean id="jacksonJsonObjectMapper" class="nl.hajari.wha.service.json.CustomObjectMapper">
		<property name="customSerializerFactory" ref="jacksonJsonCustomSerializerFactory" />
	</bean>

	<bean id="jacksonJsonCustomSerializerFactory"
		class="nl.hajari.wha.service.json.CustomSerializerFactoryRegistry">
		<property name="serializers">
			<map>
				<entry key="nl.hajari.wha.domain.Project" value-ref="projectSerializer" />
				<entry key="nl.hajari.wha.domain.Customer" value-ref="customerSerializer" />
			</map>
		</property>
	</bean>

	<bean id="projectSerializer" class="nl.hajari.wha.service.json.ProjectSerializer" />
	<bean id="customerSerializer" class="nl.hajari.wha.service.json.CustomerSerializer" />

	<bean id="customerService" class="nl.hajari.wha.service.impl.CustomerServiceImpl">
	</bean>
	<bean id="constantsService" class="nl.hajari.wha.service.impl.ConstantsServiceImpl" />

	<bean id="notificationService" class="nl.hajari.wha.service.impl.NotificationServiceImpl">
		<property name="mailSender" ref="mailSender" />
	</bean>

	<bean id="employeeService" class="nl.hajari.wha.service.impl.EmployeeServiceImpl">
		<property name="notificationService" ref="notificationService" />
	</bean>

	<!-- Notification Scheduling -->
	<task:scheduled-tasks>
		<!--  run at 10:00A.M. of the last day of month (~~ 28th): 0 0 10 28 * * -->
		<!-- For test:  0 */2 * * * * -->
		<task:scheduled ref="employeeService"
			method="sendMonthlyTimesheetUpdateNotification" cron="0 0 10 28 * *" />
	</task:scheduled-tasks>

	<!-- Jasperreports configuration -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
		<property name="basename" value="views" />
	</bean>
	<bean id="jasperReportsMultiFormatView" name="jasperReportsMultiFormatViewBean"
		class="nl.hajari.wha.web.report.CustomJasperReportsMultiFormatView">

		<!-- The value _replace_name_ will be replaced with the report name -->
		<property name="contentDispositionMappings">
			<props>
				<prop key="html">attachment; filename=_replace_name_.html</prop>
				<prop key="pdf">attachment; filename=_replace_name_.pdf</prop>
				<prop key="xls">attachment; filename=_replace_name_.xls</prop>
				<prop key="csv">attachment; filename=_replace_name_.csv</prop>
			</props>
		</property>
	</bean>

</beans>
